{"version":3,"sources":["About.js","HowToDownload.js","VideoCard.js","VideoRows.js","App.js","serviceWorker.js","index.js"],"names":["About","Modal","trigger","Button","Header","Content","Description","href","target","rel","HowToDownload","className","VideoCard","props","title","width","height","src","url","frameBorder","allow","allowFullScreen","location","source","recordingDate","uploadDate","VideoRows","videos","useEffect","console","log","map","video","key","id","App","state","sortBy","onSort","event","sortKey","sort","a","b","localeCompare","reverse","setState","prevState","fetch","then","response","json","onClick","e","this","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27a52c0b.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Header, Modal } from 'semantic-ui-react'\n\nconst About = () => {\n  return (\n    <Modal trigger={<Button>About</Button>}>\n      <Modal.Header>About</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          <Header>About this Site</Header>\n          <p>This site is dedicated to sharing and preserving records of police violence during the 2020 protests sparked by the murder of George Floyd by ex-cop Derek Chauvin.</p>\n          <p>The creator of this site does not condone or encourage violence. I do hope, though, that these videos show that the narrative portrayed in media is never the full picture, and that much of the protesting and rioting happening now is in response to violence and excessive force perpetrated by law enforcement.</p>\n          <p>There are many articles and news reports focusing on looters and destruction. However, if all you see are these reports, it makes it easy to denounce the current protests. It also makes it easy to dismiss them even when you see evidence of police violence, as there is a feeling of comfort and moral 'high-ground' in declaring violence on both sides.</p>\n          <p>Before dismissing what is going on or walking away because this subject is uncomfortable, I encourage you to <a href=\"https://twitter.com/clairewillett/status/1266894029498675200\" target=\"_blank\" rel=\"noopener noreferrer\">read this</a> and <a href=\"https://vimeo.com/425192186\" target=\"_blank\" rel=\"noopener noreferrer\">watch this</a>.</p>\n          <p>From Martin Luther King Jr.:</p>\n          <blockquote>I think America must see that riots do not develop out of thin air. Certain conditions continue to exist in our society which must be condemned as vigorously as we condemn riots. But in the final analysis, a riot is the language of the unheard.</blockquote>\n          <Header>How to Help</Header>\n          <p>There are many resources online that explain the current situation in the US far better than I can. <a href=\"https://blacklivesmatters.carrd.co/\" target=\"_blank\" rel=\"noopener noreferrer\">Start by reading through the information here and seeing how you can help</a></p>\n          <p>Do not be silent. Fight racism and the systems that perpetuate and defend it. To be silent is to be complicit.</p>\n          <Header>How to Contribute To This Site</Header>\n          <p>The content on this site is static - there is no way to directly submit content. If you have a video that you would like to contribute, please provide the information by <a href=\"https://github.com/ProgrammingAgainstBrutality/end-police-violence/issues/new\" target=\"_blank\" rel=\"noopener noreferrer\">opening a ticket here</a>. Please provide context and source link, prefferably from Reddit, Twitter, Youtube or Streamable so the content and be downloaded and preserved.</p>\n          <p>To protect protesters, no videos including protester faces or identifying features will be added to this site unless the video is clearly from a news outlet.</p>\n          <p>You can also contribute by downloading copies of these videos to help ensure they are preserved and continue to be shared in the event that the current videos and sources are removed.</p>\n          <p>If you have some experience working with GitHub, please feel free to fork, clone and host your own copy of this website.</p>\n        </Modal.Description>\n      </Modal.Content>\n    </Modal>\n  )\n}\n\nexport default About","import React from 'react'\nimport { Button, Header, Modal } from 'semantic-ui-react'\n\nconst HowToDownload = () => {\n  return (\n    <Modal trigger={<Button>How to Download These Videos</Button>}>\n      <Modal.Header>How to Download These Videos</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          <Header>How to Download Programmatically</Header>\n          <p>All video information for this site is stored <a href=\"https://raw.githubusercontent.com/ProgrammingAgainstBrutality/end-police-violence/master/videos.json\" target=\"_blank\" rel=\"noopener noreferrer\">in a JSON file</a></p>\n\n          <p>If you're using a Mac, you can quickly download all the videos compiled here\n          via the terminal. First, if you don't have it, install <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener noreferrer\">Homebrew</a>:</p>\n\n          <div className=\"code\">\n            <code>\n            /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n            </code>\n          </div>\n\n          <p>Then, install <a href=\"https://stedolan.github.io/jq/download/\" target=\"_blank\" rel=\"noopener noreferrer\"><code>jq</code></a> and <a href=\"https://github.com/ytdl-org/youtube-dl\" target=\"_blank\" rel=\"noopener noreferrer\">youtube-dl</a>:</p>\n\n          <div className=\"code\">\n            <code>\n            brew install jq\n            </code>\n            <br />\n            <code>\n            brew install youtube-dl\n            </code>\n          </div>\n          <p>Then, run the following command (as one line):</p>\n\n          <div className=\"code\">\n            <code>\n            curl 'https://raw.githubusercontent.com/ProgrammingAgainstBrutality/end-police-violence/master/videos.json' | jq -r '.[].url' > videos.txt && youtube-dl -i -a videos.txt -o '%(id)s.%(ext)s'\n            </code>\n          </div>\n\n          <p>This will download all videos and save them by their IDs.</p>\n\n          <Header>Manually Download Videos</Header>\n\n          <p>To manually download these videos, copy the source link for each video displayed on the site and paste into one of the following online downloaders:</p>\n\n          <li>For Reddit videos, we used <a href=\"https://redv.co/\" target=\"_blank\" rel=\"noopener noreferrer\">https://redv.co/</a> (Note: online version does not\n          perserve sound)</li>\n\n          <li>For Twitter videos: <a href=\"https://twdownload.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://twdownload.com/</a></li>\n\n          <li>For YouTube and Streamable: <a href=\"https://keepv.id/\" target=\"_blank\" rel=\"noopener noreferrer\">https://keepv.id/</a></li>\n\n        </Modal.Description>\n      </Modal.Content>\n    </Modal>\n  )\n}\n\nexport default HowToDownload","import React from 'react'\n\n\nconst VideoCard = (props) => {\n  const handleDate = () => {\n    if (props.recordingDate) {\n      return <span>{props.recordingDate}</span>\n    }  else {\n      return null\n    }\n  }\n  const handleLocation = () => {\n    if (props.location) {\n      return <span>{props.location}</span>\n    }  else {\n      return null\n    }\n  }\n\n  return (\n    <tr>\n      <td>\n        <iframe title={props.title} width=\"560\" height=\"315\" src={props.url} frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen=\"allowfullscreen\">\n        </iframe>\n      </td>\n      <td className=\"rowTitle\">{props.title}</td>\n      <td className=\"rowLocation\">{handleLocation()}</td>\n      <td className=\"rowSource\"><a href={props.source} target=\"_blank\" rel=\"noopener noreferrer\">{props.source}</a></td>\n      <td>{handleDate()}</td>\n      <td>{props.uploadDate}</td>\n    </tr>\n  )\n}\n\nexport default VideoCard","import React, {useEffect} from 'react'\nimport VideoCard from './VideoCard'\n\nconst VideoRows = ({videos}) => {\n  \n  useEffect(() => {\n    console.log(videos)\n  })\n  \n  return (\n    <>\n      {videos.map(video => <VideoCard key={video.id} {...video}/>)}\n    </>\n  )\n}\n\nexport default VideoRows","import React from 'react';\n\nimport About from './About'\nimport HowToDownload from './HowToDownload'\nimport VideoRows from './VideoRows'\nimport './App.css';\n\nclass App extends React.Component {\n\n  state = {\n    videos: [],\n    sortBy: ''\n  }\n\n  componentDidMount() {\n    fetch('https://raw.githubusercontent.com/ProgrammingAgainstBrutality/end-police-violence/master/videos.json')\n    .then(response => response.json())\n    .then(videos => this.setState({videos}))\n  }\n\n  onSort = (event, sortKey) => {\n    const videos = this.state.videos;\n    let sortBy = this.state.sortBy;\n    videos.sort((a,b) => a[sortKey].localeCompare(b[sortKey]))\n\n    if (sortBy === sortKey) {\n      videos.reverse();\n      sortBy = sortKey + 'Reverse'\n    } else {\n      sortBy = sortKey\n    }\n    \n    this.setState((prevState) => ({\n      videos,\n      sortBy\n    }))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n         <h1 className=\"title\">End Police Violence</h1>\n         <h2 className=\"subtitle\">Records of Police Brutality and Excessive Force During the 2020 George Floyd Protests</h2>\n         <h4 className=\"warning\"><strong>Videos contain graphic content</strong></h4>\n         <About />\n         <HowToDownload />\n        </header>\n        <main>\n        <table>\n          <thead>\n            <tr>\n              <th>Video</th>\n              <th onClick={e => this.onSort(e, 'title')}>Description</th>\n              <th onClick={e => this.onSort(e, 'location')}>Location</th>\n              <th onClick={e => this.onSort(e, 'source')}>Original Source</th>\n              <th onClick={e => this.onSort(e, 'recordingDate')}>Recording Date</th>\n              <th onClick={e => this.onSort(e, 'uploadDate')}>Upload Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            <VideoRows videos={this.state.videos}/>\n          </tbody>\n        </table>\n        </main>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}