{"version":3,"sources":["VideoCard.js","About.js","App.js","serviceWorker.js","index.js"],"names":["VideoCard","props","title","width","height","src","url","frameBorder","allow","allowFullScreen","className","location","href","source","target","rel","recordingDate","uploadDate","About","Modal","trigger","Button","Header","Content","Description","App","useState","videos","setVideos","useEffect","fetch","then","response","json","console","log","onSort","event","sortKey","data","sort","a","b","localeCompare","onClick","e","map","video","key","id","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kRAkCeA,EA/BG,SAACC,GAgBjB,OACE,4BACE,4BACE,4BAAQC,MAAOD,EAAMC,MAAOC,MAAM,MAAMC,OAAO,MAAMC,IAAKJ,EAAMK,IAAKC,YAAY,IAAIC,MAAM,0EAA0EC,gBAAgB,qBAGvL,wBAAIC,UAAU,YAAYT,EAAMC,OAChC,wBAAIQ,UAAU,eAdZT,EAAMU,SACD,8BAAOV,EAAMU,UAEb,MAYP,wBAAID,UAAU,aAAY,uBAAGE,KAAMX,EAAMY,OAAQC,OAAO,SAASC,IAAI,uBAAuBd,EAAMY,SAClG,4BAvBEZ,EAAMe,cACD,8BAAOf,EAAMe,eAEb,MAqBP,4BAAKf,EAAMgB,c,2BCJFC,EAtBD,WACZ,OACE,kBAACC,EAAA,EAAD,CAAOC,QAAS,kBAACC,EAAA,EAAD,eACd,kBAACF,EAAA,EAAMG,OAAP,cACA,kBAACH,EAAA,EAAMI,QAAP,KACE,kBAACJ,EAAA,EAAMK,YAAP,KACE,kBAACF,EAAA,EAAD,wBACA,8FACA,kMACA,2DACA,uRACA,oIACA,kBAACA,EAAA,EAAD,0BACA,wMAA6K,uBAAGV,KAAK,iFAAR,yBAA7K,qJACA,sNACA,2J,OCwCKa,MArDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,KASbC,qBAAU,WALRC,MAAM,wGACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAJ,GAAM,OAAIC,EAAUD,MAK1BO,QAAQC,IAAI,mBACX,IAEHN,qBAAU,WACRK,QAAQC,IAAIR,KACX,CAACA,IAEJ,IAAMS,EAAS,SAACC,EAAOC,GACrB,IAAMC,EAAOZ,EACbY,EAAKC,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEH,GAASK,cAAcD,EAAEJ,OAC9CV,EAAUW,IAGZ,OACE,yBAAK7B,UAAU,OACb,gCACC,wBAAIA,UAAU,SAAd,uBACA,wBAAIA,UAAU,YAAd,qEACA,wBAAIA,UAAU,WAAU,uFACxB,kBAAC,EAAD,OAED,8BACA,+BACE,+BACE,4BACE,qCACA,wBAAIkC,QAAS,SAAAC,GAAC,OAAIT,EAAOS,EAAG,WAA5B,eACA,wBAAID,QAAS,SAAAC,GAAC,OAAIT,EAAOS,EAAG,cAA5B,YACA,wBAAID,QAAS,SAAAC,GAAC,OAAIT,EAAOS,EAAG,YAA5B,mBACA,wBAAID,QAAS,SAAAC,GAAC,OAAIT,EAAOS,EAAG,mBAA5B,kBACA,wBAAID,QAAS,SAAAC,GAAC,OAAIT,EAAOS,EAAG,gBAA5B,iBAGJ,+BACGlB,EAAOmB,KAAI,SAAAC,GAAK,OAAI,kBAAC,EAAD,eAAWC,IAAKD,EAAME,IAAQF,YCtCzCG,QACW,cAA7BC,OAAOxC,SAASyC,UAEe,UAA7BD,OAAOxC,SAASyC,UAEhBD,OAAOxC,SAASyC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.130a50fb.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst VideoCard = (props) => {\n  const handleDate = () => {\n    if (props.recordingDate) {\n      return <span>{props.recordingDate}</span>\n    }  else {\n      return null\n    }\n  }\n  const handleLocation = () => {\n    if (props.location) {\n      return <span>{props.location}</span>\n    }  else {\n      return null\n    }\n  }\n\n  return (\n    <tr>\n      <td>\n        <iframe title={props.title} width=\"560\" height=\"315\" src={props.url} frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen=\"allowfullscreen\">\n        </iframe>\n      </td>\n      <td className=\"rowTitle\">{props.title}</td>\n      <td className=\"rowLocation\">{handleLocation()}</td>\n      <td className=\"rowSource\"><a href={props.source} target=\"_blank\" rel=\"noopener noreferrer\">{props.source}</a></td>\n      <td>{handleDate()}</td>\n      <td>{props.uploadDate}</td>\n    </tr>\n  )\n}\n\nexport default VideoCard","import React from 'react'\nimport { Button, Header, Image, Modal } from 'semantic-ui-react'\n\nconst About = () => {\n  return (\n    <Modal trigger={<Button>About</Button>}>\n      <Modal.Header>About</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          <Header>About this Site</Header>\n          <p>The creators of this site do not condone or encourage violence.</p>\n          <p>This site is dedicated to sharing and preserving records of police violence during the 2020 protests sparked by the murder of George Floyd by ex-cop Derek Chauvin.</p>\n          <p>From Martin Luther King Jr.:</p>\n          <quote>I think America must see that riots do not develop out of thin air. Certain conditions continue to exist in our society which must be condemned as vigorously as we condemn riots. But in the final analysis, a riot is the language of the unheard.</quote>\n          <p>Credit to Reddit users 3VD and wet4 for compiling the original lists of videos used to make this site</p>\n          <Header>How to Contribute</Header>\n          <p>The content on this site is static - there is no way to directly submit content. If you have a video that you would like to contribute, please provide the information by <a href=\"https://github.com/ProgrammingAgainstBrutality/end-police-violence/issues/new\">opening a ticket here</a>. Please provide context and source link, prefferably from Reddit, Twitter, Youtube or Streamable so the content and be downloaded and preserved.</p>\n          <p>You can also contribute by downloading copies of these videos to help ensure they are preserved and continue to be shared in the event that the current videos and sources are removed.</p>\n          <p>If you have some experience working with GitHub, please feel free to fork, clone and host your own copy of this website.</p>\n        </Modal.Description>\n      </Modal.Content>\n    </Modal>\n  )\n}\n\nexport default About","import React, {useState, useEffect} from 'react';\nimport VideoCard from './VideoCard'\nimport About from './About'\nimport './App.css';\n\nfunction App() {\n  const [videos, setVideos] = useState([])\n\n  const getVideos = () => {\n    fetch('https://raw.githubusercontent.com/ProgrammingAgainstBrutality/end-police-violence/master/videos.json')\n    .then(response => response.json())\n    .then(videos => setVideos(videos))\n  }\n\n  useEffect(() => {\n    getVideos()\n    console.log('only on start')\n  }, [])\n\n  useEffect(() => {\n    console.log(videos)\n  }, [videos])\n\n  const onSort = (event, sortKey) => {\n    const data = videos;\n    data.sort((a,b) => a[sortKey].localeCompare(b[sortKey]))\n    setVideos(data)\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n       <h1 className=\"title\">End Police Violence</h1>\n       <h2 className=\"subtitle\">Records of Police Brutality during the 2020 George Floyd Protests</h2>\n       <h4 className=\"warning\"><strong>Please be advised - Videos contain graphic content</strong></h4>\n       <About />\n      </header>\n      <main>\n      <table>\n        <thead>\n          <tr>\n            <th>Video</th>\n            <th onClick={e => onSort(e, 'title')}>Description</th>\n            <th onClick={e => onSort(e, 'location')}>Location</th>\n            <th onClick={e => onSort(e, 'source')}>Original Source</th>\n            <th onClick={e => onSort(e, 'recordingDate')}>Recording Date</th>\n            <th onClick={e => onSort(e, 'uploadDate')}>Upload Date</th>\n          </tr>\n        </thead>\n        <tbody>\n          {videos.map(video => <VideoCard key={video.id} {...video}/>)}\n        </tbody>\n      </table>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}